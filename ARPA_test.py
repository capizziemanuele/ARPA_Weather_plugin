# -*- coding: utf-8 -*-
"""
/***************************************************************************
 arpatest
                                 A QGIS plugin
 Plugin for testing ARPA API
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-12-29
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Emanuele Capizzi
        email                : capizzi.emanuele@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QVariant, QTime, QDate, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QApplication
from qgis.core import QgsProject, QgsVectorLayer, QgsFields, QgsField, QgsJsonUtils
from PyQt5.QtCore import QTextCodec

# Import libraries
import json
import os
import datetime
import time
import statistics
from sodapy import Socrata
import pandas as pd

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .ARPA_test_dialog import arpatestDialog
import os.path

# Properites / Lists

properties_types = [("idsensore", QVariant.Int), ("tipologia", QVariant.String),
                    ("unit_dimisura", QVariant.String), ("idstazione", QVariant.Int),
                    ("nomestazione", QVariant.String), ("quota", QVariant.Double),
                    ("provincia", QVariant.String), ("datastart", QVariant.String),
                    ("storico", QVariant.String),
                    ("cgb_nord", QVariant.Int), ("cgb_est", QVariant.Int),
                    ("lng", QVariant.Double), ("lat", QVariant.Double)]

list_properties = dict(properties_types).keys()

sensors_types = ["Altezza Neve", "Direzione Vento", "Livello Idrometrico", "Precipitazione", "Radiazione Globale", "Temperatura",
                 "Umidità Relativa", "Velocità Vento"]

# Functions


def df_to_geojson(df, properties, lat='lat', lon='lng'):
    """A function to convert a pandas Dataframe to a geojson file.

    Args:
        df (Pandas Dataframe): pandas Dataframe with longitude and latitude columns
        properties (str list): columns properties
        lat (str, optional): latitude column
        lon (str, optional): longitude column

    Returns:
        _type_: return geojson file
    """
    df = df.dropna(subset=[lat, lon], axis=0, inplace=False)

    df[lat] = df[lat].astype(float)
    df[lon] = df[lon].astype(float)

    df = df[properties]
    # create a new python dict to contain our geojson data, using geojson format
    geojson = {'type': 'FeatureCollection', 'features': []}

    # loop through each row in the dataframe and convert each row to geojson format
    for _, row in df.iterrows():
        # create a feature template to fill in
        feature = {'type': 'Feature',
                   'properties': {},
                   'geometry': {'type': 'Point',
                                'coordinates': []}}

        # fill in the coordinates
        feature['geometry']['coordinates'] = [row[lon], row[lat]]

        # for each column, get the value and add it as a new feature property
        for prop in properties:
            feature['properties'][prop] = row[prop]

        # add this feature (aka, converted dataframe row) to the list of features inside our dict
        geojson['features'].append(feature)

    return geojson


def add_vector_points_from_geojson(geojson_file, layer_name, properties_types):
    """Function to add vector points to a QGIS layer from a .geojson file

    Args:
        geojson_file (geojson): input .geojson file 
        layer_name (str): layer name to be shown in QGIS
    """
    fcString = json.dumps(geojson_file)
    codec = QTextCodec.codecForName("UTF-8")
    fields = QgsJsonUtils.stringToFields(fcString, codec)
    feats = QgsJsonUtils.stringToFeatureList(fcString, fields, codec)

    vl = QgsVectorLayer('Point?crs=EPSG:4326', layer_name, "memory")
    dp = vl.dataProvider()

    # Add the fields
    qgs_f = QgsFields()
    for property in properties_types:
        qgs_f.append(QgsField(property[0], property[1]))
    dp.addAttributes(qgs_f)
    vl.updateFields()

    dp.addFeatures(feats)
    vl.updateExtents()

    QgsProject.instance().addMapLayer(vl)


class arpatest:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'arpatest_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&ARPA test')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('arpatest', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/ARPA_test/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'ARPA test'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&ARPA test'),
                action)
            self.iface.removeToolBarIcon(action)

    def test_function(self):
        print("Works!")

    def connect_to_ARPA_api(self):
        """ Unauthenticated client only works with public data sets, and there is a limit for the requests.
        Note 'None' in place of application token, and no username or password.
        To get all the available data from the API the authentication is required.
         """

        # If logging without API key to public dataset
        #client = Socrata("www.dati.lombardia.it", None)

        # Authenticated client (needed for non-public datasets):
        client = Socrata("www.dati.lombardia.it", "riTLzYVRVdDaQtUkxDDaHRgJi")

        return client

    def request_ARPA_stations_info(self, client):
        """ Request data from ARPA API"""

        # dataset id of meteorological stations on Open Data Regione Lombardia
        meteo_stations_info = "nf78-nj6b"
        query = """select * """
        sensors = client.get(meteo_stations_info, query=query)
        sensors_df = pd.DataFrame(data=sensors)

        return sensors_df


    # def on_dataset_changed(self, value_dataset):

    #     self.dlg.sensor_type_list.clear()

    #     # get the current time to define the available data at current time
    #     now_date = QDateTime.currentDateTime().date()
    #     now_day = now_date.day()
    #     if now_day < 2:
    #         max_date = now_date.addDays(-now_day)
    #     else:
    #         max_date = now_date.addDays(-1)
    #     # We take the max_date and not the now_date in case the date is the first day of the month
    #     now_month = max_date.month()
    #     now_year = max_date.year()

    #     if value_dataset == 1:

    #         # For weather, only the data of the current month is available
    #         min_datetime = QDateTime(QDate(now_year, now_month, 1), QTime(1, 0, 0, 0))
    #         max_datetime = QDateTime(max_date, QTime(0, 0, 0, 0))

    #         # Sensor list for Weather
    #         items = ["Altezza Neve", "Direzione Vento", "Livello Idrometrico", "Precipitazione", "Radiazione Globale", "Temperatura",
    #                     "Umidità Relativa", "Velocità Vento"]

    #         self.dlg.dateTime_stop.setMinimumDateTime(min_datetime)
    #         self.dlg.dateTime_stop.setMaximumDateTime(max_datetime)
    #         self.dlg.dateTime_stop.setDateTime(max_datetime)

    #         self.dlg.dateTime_start.setMinimumDateTime(min_datetime)
    #         self.dlg.dateTime_start.setMaximumDateTime(max_datetime)
    #         self.dlg.dateTime_start.setDateTime(min_datetime)

    #         self.dlg.sensor_type_list.addItems(items)

    #     elif value_dataset <=0:
    #         print("Initial value OK")
    #         pass
    #     else:
    #         print("No valid value for dataset number")
    #         pass

# --- RUN ------------

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = arpatestDialog()

        # Add sensors type
        self.dlg.cbSensorsType.clear()
        self.dlg.cbSensorsType.addItems(
            [str(sensor) for sensor in sensors_types])

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()

        if result:

            print("---------- Start test ----------")
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            client = self.connect_to_ARPA_api()

            df = self.request_ARPA_stations_info(client)

            currentSelectedSensor = self.dlg.cbSensorsType.currentText()

            df = df.loc[df['tipologia'] == str(currentSelectedSensor)]

            # create the vector layer for stations
            stations_geojson = df_to_geojson(df, list_properties)
            # Add sensors
            add_vector_points_from_geojson(
                stations_geojson, "Sensori " + str(currentSelectedSensor), properties_types)

            print(currentSelectedSensor)
